/*
 * Some code taken from http://ninjacave.com/slickutil1
 */

package managers;

import java.io.IOException;
import utilities.*;
import org.lwjgl.opengl.GL11;
import org.newdawn.slick.Color;
import org.newdawn.slick.opengl.Texture;
import org.newdawn.slick.opengl.TextureLoader;
import org.newdawn.slick.util.ResourceLoader;
 
public class Textures { 
	/** The texture that will hold the image details */	
	private static String[] playerWLNames = { "steve/steve_WL_0.png","steve/steve_WL_1.png","steve/steve_WL_2.png","steve/steve_WL_3.png","steve/steve_WL_4.png" };
	public static Texture[] playerWLFrames;	
	
	private static String[] playerWRNames = { "steve/steve_WR_0.png","steve/steve_WR_1.png","steve/steve_WR_2.png","steve/steve_WR_3.png","steve/steve_WR_4.png" };
	public static Texture[] playerWRFrames;
	
	private static String[] playerJNames = { "steve/steve_J_0.png","steve/steve_J_1.png","steve/steve_J_2.png","steve/steve_J_3.png","steve/steve_J_4.png" };
	public static Texture[] playerJFrames;
	
	private static String[] playerFNames = { "steve/steve_F_0.png","steve/steve_F_1.png","steve/steve_F_2.png","steve/steve_F_3.png","steve/steve_F_4.png" };
	public static Texture[] playerFFrames;
	
	private static String[] livesNames = { "lives_active.png", "lives_inactive.png" };
	public static Texture[] livesFrames;
	
	private static String[] lavaNames = { "lava/lava_still_0.png","lava/lava_still_1.png","lava/lava_still_2.png","lava/lava_still_3.png","lava/lava_still_4.png","lava/lava_still_5.png" };
	public static Texture[] lava;
	
	public static Texture mainMenuBackground;
	public static Texture controlsScreen;
	
	private static String[] storyScreenNames = { "scenebackgrounds/story_screen_1.png","scenebackgrounds/story_screen_2.png","scenebackgrounds/story_screen_3.png" };
	public static Texture[] storyScreens;
	
	public static Texture nether_background;
	
	public static Texture winScreen, loseScreen;
	
	public static Texture netherrack;
	public static Texture portal;
	public static Texture endportal;
	
	private static String[] backButtonNames = { "buttons/back_inactive.png","buttons/back_active.png" };
	public static Texture[] backButtonFrames;
	
	private static String[] controlsButtonNames = { "buttons/controls_inactive.png","buttons/controls_active.png" };
	public static Texture[] controlsButtonFrames;
	
	private static String[] playButtonNames = { "buttons/play_inactive.png","buttons/play_active.png" };
	public static Texture[] playButtonFrames;
	
	private static String[] playAgainButtonNames = { "buttons/playagain_inactive.png","buttons/playagain_active.png" };
	public static Texture[] playAgainButtonFrames;
	
	private static String[] mainMenuButtonNames = { "buttons/mainmenu_inactive.png","buttons/mainmenu_active.png" };
	public static Texture[] mainMenuButtonFrames;
	
	private static String[] quitButtonNames = { "buttons/quit_inactive.png","buttons/quit_active.png" };
	public static Texture[] quitButtonFrames;
	
	private static String[] pauseButtonNames = { "buttons/pause_inactive.png","buttons/pause_active.png","buttons/resume_inactive.png","buttons/resume_active.png" };
	public static Texture[] pauseButtonFrames;
	
	/**
	 * Initialise the GL display
	 * 
	 * @param width The width of the display
	 * @param height The height of the display
	 */
	public static void initGL(int width, int height) {
		GL11.glEnable(GL11.GL_TEXTURE_2D);               
 
		GL11.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);          
 
        	// enable alpha blending
        	GL11.glEnable(GL11.GL_BLEND);
        	GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 
        	GL11.glViewport(0,0,width,height);
		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 
		GL11.glMatrixMode(GL11.GL_PROJECTION);
		GL11.glLoadIdentity();
		GL11.glOrtho(0, width, height, 0, 1, -1);
		GL11.glMatrixMode(GL11.GL_MODELVIEW);
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
	}
 
	/**
	 * Initialise resources
	 */
	public static Texture load(String img, String type) throws IOException {
		return TextureLoader.getTexture(type, ResourceLoader.getResourceAsStream("res/" + img));
	}
	
	public static void init() {
		try {			
			playerWLFrames = Spritesheet.spliceLoad(playerWLNames, "PNG");
			playerWRFrames = Spritesheet.spliceLoad(playerWRNames, "PNG");
			playerJFrames = Spritesheet.spliceLoad(playerJNames, "PNG");
			playerFFrames = Spritesheet.spliceLoad(playerFNames, "PNG");
			
			livesFrames = Spritesheet.spliceLoad(livesNames, "PNG");
			
			lava = Spritesheet.spliceLoad(lavaNames, "PNG");
			
			mainMenuBackground = load("scenebackgrounds/main_menu_screen.png", "PNG");
			controlsScreen = load("scenebackgrounds/controls_screen.png", "PNG");
			storyScreens = Spritesheet.spliceLoad(storyScreenNames, "PNG");
			
			winScreen = load("scenebackgrounds/win_screen.png", "PNG");
			loseScreen = load("scenebackgrounds/lose_screen.png", "PNG");
			
			nether_background = load("scenebackgrounds/nether_background.png", "PNG");
			
			netherrack = load("netherrack.png", "PNG");
			portal = load("portal.png", "PNG");
			endportal = load("endportal.png", "PNG");
			
			backButtonFrames = Spritesheet.spliceLoad(backButtonNames, "PNG");
			controlsButtonFrames = Spritesheet.spliceLoad(controlsButtonNames, "PNG");
			playButtonFrames = Spritesheet.spliceLoad(playButtonNames, "PNG");
			playAgainButtonFrames = Spritesheet.spliceLoad(playAgainButtonNames, "PNG");
			mainMenuButtonFrames = Spritesheet.spliceLoad(mainMenuButtonNames, "PNG");
			quitButtonFrames = Spritesheet.spliceLoad(quitButtonNames, "PNG");
			pauseButtonFrames = Spritesheet.spliceLoad(pauseButtonNames, "PNG");
		}
		catch(IOException e) {
			System.out.println("Error in loading");
		}
		
	}
 
	/**
	 * draw a quad with the image on it
	 */
	
	public static void render(Texture texture, int x, int y, int w, int h) {
		Color.white.bind();
		texture.bind(); // or GL11.glBind(texture.getTextureID());
 
		GL11.glBegin(GL11.GL_QUADS);
			GL11.glTexCoord2f(0,0);
			GL11.glVertex2f(x, y);
//			System.out.println("First vertex: " + x + " " + y);
			GL11.glTexCoord2f(1,0);
			GL11.glVertex2f(x + w,y);
//			System.out.println("Second vertex: " + (x + w) + " " + y);
			GL11.glTexCoord2f(1,1);
			GL11.glVertex2f(x + w, y + h);
//			System.out.println("Third vertex: " + (x + w) + " " + (y + h));
			GL11.glTexCoord2f(0,1);
			GL11.glVertex2f(x, y + h);
//			System.out.println("Fourth vertex: " + x + " " + (y + h));
			//System.out.println(texture.getTextureWidth() + " " + texture.getTextureWidth());
		GL11.glEnd();
	}
	
	public static void render(Texture texture, int x, int y) {
		Color.white.bind();
		texture.bind(); // or GL11.glBind(texture.getTextureID());
 
		GL11.glBegin(GL11.GL_QUADS);
			GL11.glTexCoord2f(0,0);
			GL11.glVertex2f(x, y);
			GL11.glTexCoord2f(1,0);
			GL11.glVertex2f(x + texture.getTextureWidth(),y);
			GL11.glTexCoord2f(1,1);
			GL11.glVertex2f(x + texture.getTextureWidth(), y + texture.getTextureHeight());
			GL11.glTexCoord2f(0,1);
			GL11.glVertex2f(x, y + texture.getTextureHeight());
		GL11.glEnd();
	}
	
	public static void render(Texture texture) {
		render(texture, 0, 0);
	}
}