package testing;

import game.Constants;
import game.Textures;
import game.game_objects.*;
import game.game_objects.VisibleObject;
import game.game_objects.blocks.Block;

import java.util.ArrayList;

import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;


public class Game {
	
	public static int WIDTH = 1200;
	public static int HEIGHT = 600;
	
	public static void main(String[] args) {
        try {
            Display.setDisplayMode(new DisplayMode(WIDTH, HEIGHT));
            Display.setTitle("2D Craft");
            Display.create();
        } catch (LWJGLException e) {
            System.err.println("Display wasn't initialized correctly.");
            System.exit(1);
        }
        
        Textures.initGL(WIDTH, HEIGHT);
        Textures.init(); 
        
//        Textures.render(Textures.hatsune);
        
        EntityPlayer b = new EntityPlayer(0, 0, 30);
        Block b2 = new Block(0, 256);
        while (!Display.isCloseRequested()) {
        	Textures.render(Textures.sky);
        	if (Keyboard.isKeyDown(Keyboard.KEY_D)) {
				b.xVelocity = Constants.MOVE_VELOCITY;
			}
        	else if (Keyboard.isKeyDown(Keyboard.KEY_A)) {
				b.xVelocity = -1 * Constants.MOVE_VELOCITY;
			}
        	else {
        		b.xVelocity = 0;
        	}
        	if(Keyboard.isKeyDown(Keyboard.KEY_S)){
        		b.yVelocity = 1;
        	}
        	else if(Keyboard.isKeyDown(Keyboard.KEY_W)) {
        		b.yVelocity = -1;
        	}
        	else {
        		b.yVelocity = 0;
        	}
        	if (Keyboard.isKeyDown(Keyboard.KEY_L)) {
				b2.xVelocity = Constants.MOVE_VELOCITY;
			}
        	else if (Keyboard.isKeyDown(Keyboard.KEY_J)) {
				b2.xVelocity = -1 * Constants.MOVE_VELOCITY;
			}
        	else {
        		b2.xVelocity = 0;
        	}
        	if(Keyboard.isKeyDown(Keyboard.KEY_K)){
        		b2.yVelocity = 1;
        	}
        	else if(Keyboard.isKeyDown(Keyboard.KEY_I)) {
        		b2.yVelocity = -1;
        	}
        	else {
        		b2.yVelocity = 0;
        	}
        	
        	b.update();
        	b2.update();
//        	if(b.isColliding(b2)) {
//        		System.out.println("colliding");
//        	}
//        	if(b.onTopOf(b2)) {
//        		System.out.println("on top of");
//        	}
        	ArrayList<VisibleObject> arr = new ArrayList<VisibleObject>();
        	arr.add((VisibleObject) b2);
        	b.collideStop(arr);
            Display.update();
            Display.sync(100);
        }
 
        Display.destroy();
        System.exit(0);
	}
}
