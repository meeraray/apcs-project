package game;

import game.game_objects.*;
import game.game_objects.blocks.*;
import managers.GameManager;
import managers.Sounds;
import managers.Textures;
import testing.Game;
import utilities.*;

public class ParkourLevel extends Level {
	protected Cooldown parkourLevelTime;
	
	private int playerSpawnX, playerSpawnY;
	private double time;
	private boolean hurtByLava, playPoisonSound, playBurnSound;
	
	public ParkourLevel(boolean pausable) { super(pausable); }
	
	public void setup() {		
		super.setup();
		
		outOfTimeTransition = false;
		hurtByLava = false;
		playPoisonSound = false;
		playBurnSound = false;
		
		Sounds.play(Sounds.screenflip, AudioType.SFX);
		Sounds.play(Sounds.parkourLevelMusic, AudioType.MUSIC);
		
		playerSpawnX = 0;
		playerSpawnY = Game.HEIGHT / 2 - player.height - 64 + 5;
		
		player.x = playerSpawnX;
		player.y = playerSpawnY;
		
		for(int i = 0; i < Constants.GAME_WIDTH; i += Constants.UNITSIZE) {
			BlockLava floor = new BlockLava(i, Game.HEIGHT - Constants.UNITSIZE);
			imgs.add(floor);
			blocks.add(floor);
			collidables.add(floor);
		}
		BlockPortal portal = new BlockPortal(0, Constants.GAME_HEIGHT / 2 - 128 - 64);
		imgs.add(portal);
		blocks.add(portal);
		//collidables.add(portal);
		
		double[] obstacleXYCoords = new double[]{0, 0, 1, 0, 2, 1, 4, 1, 5, -1, 7, -1, 8, 0, 10, 1, 12.5, -1, 13.5, -1, 14.5, 0.28,
				15.5, -0.71, 16.5, -0.71, 17.5, -0.71, 18.5, -0.71};
		int baseLevel = Game.HEIGHT / 2 - 64;
		for(int i = 0; i < obstacleXYCoords.length; i += 2) {
			BlockNether b = new BlockNether((int) (obstacleXYCoords[i] * 64), (int) (obstacleXYCoords[i + 1] * -64 + baseLevel));
			imgs.add(b);
			blocks.add(b);
			collidables.add(b);
		}
		BlockEndPortal endportal = new BlockEndPortal(Constants.GAME_WIDTH - 64, (int) (-0.71 * -64 + baseLevel - 128));
		imgs.add(endportal);
		blocks.add(endportal);
		imgs.add(player);
		
		for (int i = 0; i < hearts.length; i++) { imgs.add(hearts[i]); }
		
		time = 5.0 + (Math.random()*15);	// from 5-20 seconds for the player to complete the entire level per respawn
		parkourLevelTime = new Cooldown(time);
		System.out.println(time);
		cooldowns.add(parkourLevelTime);
	}

	protected void update() {
		super.update();
		
		parkourLevelTime.update();
		parkourLevelTime.printInfo();
		
		if (parkourLevelTime.isCooldownCompleted() && !winTransition) { outOfTimeTransition(); } 
		
		if (!Sounds.lava.isPlaying()) { Sounds.play(Sounds.lava, AudioType.SFX); }
		
    	for(Block b : blocks) {
    		if(b instanceof BlockLava) {
    			if (player.isColliding(b)) {	    			
    				if (!hurtByLava) { 
    					player.setLives(player.getLives()-1); 
    					hurtByLava = true;
    				}
    				if (!winTransition) { lostLifeOrLoseTransition(); }
	    			break;
    			} 
    		}
    		if(b instanceof BlockEndPortal && player.isColliding(b)) {
    			if (!outOfTimeTransition && !lostLifeOrLostTransition) { winTransition(); }
    		} 
    	}
    	
    	for (int i = 0; i < player.getLives(); i++) { hearts[i].setActive(true); }

    	for(VisibleObject o : imgs) { o.update(); }
	}

	protected void render() {
		Textures.render(Textures.nether_background);
		for(VisibleObject o : imgs) { o.render(); }
	}
	
	public void clear() {
		super.clear();
	}
	
	protected void winTransition() {
		if (!winTransition) {
			transitionTime.reset();
			winTransition = true;
		}
		
		if (!playWinSound) { 
			Sounds.play(Sounds.tada, AudioType.SFX); 
			playWinSound = true;
		}
		
		if (transitionTime.isCooldownCompleted()) { 
			winTransition = false;
			clear();
			GameManager.RunScene(4);	// win screen
		}
	}
	
	protected void lostLifeOrLoseTransition() {		
		if (!lostLifeOrLostTransition) {
			transitionTime.reset();
			lostLifeOrLostTransition = true;
		}

		if (!playBurnSound) { 
			Sounds.play(Sounds.burn, AudioType.SFX); 
			playBurnSound = true;
		}
		
		if (transitionTime.isCooldownCompleted()) {
			if (player.getLives() == 0) {
				clear();
				GameManager.RunScene(5);	// lose screen
			} else {
				time = 5.0 + (Math.random()*15);	// from 5-20 seconds for the player to complete the entire level per respawn
				
				cooldowns.remove(parkourLevelTime);
				parkourLevelTime = new Cooldown(time);
				parkourLevelTime.reset();
				cooldowns.add(parkourLevelTime);
				
				player.x = playerSpawnX;
				player.y = playerSpawnY;
			}
			
			lostLifeOrLostTransition = false;
			hurtByLava = false;
			playBurnSound = false;
		}
	}
	
	protected void outOfTimeTransition() {
		if (!outOfTimeTransition) {
			transitionTime.reset();
			outOfTimeTransition = true;
		}
		
		if (!playPoisonSound) {
			Sounds.play(Sounds.poison, AudioType.SFX);
			playPoisonSound = true;
		}
		
		if (transitionTime.isCooldownCompleted()) {
			outOfTimeTransition = false;
			clear();
			GameManager.RunScene(6);	// out of time scene
		}
	}
}